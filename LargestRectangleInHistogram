class Solution {
public:
    vector<int> nextsmaller(vector<int> heights , int n)
    {
        stack<pair<int,int>> s1;
        vector<int> r;
        r.push_back(n);
        s1.push({heights[n-1],n-1});

        for(int i=n-2 ; i>=0 ; i--)
        {
            while(!s1.empty() && (s1.top().first>=heights[i]))
            {
                s1.pop();
            }
            if(s1.empty())
                r.push_back(n);
        
            else
                r.push_back(s1.top().second);
            
            s1.push({heights[i],i});
        }
        reverse(r.begin(),r.end());
        return r;

    }

    vector<int> prevsmaller(vector<int> heights , int n)
    {
         stack<pair<int,int>> s2;
        vector<int> l;
        l.push_back(-1);
        s2.push({heights[0],0});

        for(int i=1 ; i<n ; i++)
        {
            while(!s2.empty() && (s2.top().first>=heights[i]))
            {
                s2.pop();
            }
            if(s2.empty())
                l.push_back(-1);
        
            else
                l.push_back(s2.top().second);
            
            s2.push({heights[i],i});
        }
        return l;

    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> right = nextsmaller(heights,n);
        vector<int> left = prevsmaller(heights,n);

        int max=0,area=0;
        for(int i=0 ; i<n ; i++)
        {
            int width = right[i]-left[i]-1;
            area = width*heights[i];
            if(area>max)
            max=area;
        }
        return max;
    }
};
